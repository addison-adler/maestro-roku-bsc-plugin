import { BsConfig, BrsFile, ParseMode, XmlFile } from 'brighterscript';
import * as path from 'path';

import { File } from '../fileProcessing/File';
import { ProjectFileMap } from '../fileProcessing/ProjectFileMap';

import { ProcessorConfig } from '../fileProcessing/ProcessorConfig';

/*
Crude brighterscript class processor
 */
export default class ReflectionUtil {
  constructor(fileMap: ProjectFileMap) {
    this.fileMap = fileMap;
  }

  private fileMap: ProjectFileMap;

  public getClassMapFunction(namespace: string): string {
    let text = `
    function ${namespace}_getClass(name)
    name = name.replace(".", "_")
    `;
    this.fileMap.classNames.length;

    this.fileMap.classNames.forEach((clazz, index) => {
      text += `
      ${index === 0 ? '' : 'else '} if name = "${clazz}"
        return ${clazz}
      `;
    });

    text += `${this.fileMap.classNames.length > 0 ? 'end if' : ''}
    end function
    `;

    return text;
  }

  public getXMLCompTypesFunction(namespace: string): string {
    let text = `
    function ${namespace}_getAllXMLCompNames()
      return [\n
    `;
    const compNames = [...this.fileMap.XMLComponentNames];

    compNames.forEach((name) => {
      text += ` "${name}"\n`;
    });

    text += `\n]\n'
    end function\n
    `;

    return text;
  }

  public createUtilFile(bsConfig: BsConfig) {
    // todo probs the wrong path
    const filePath = path.join(
      bsConfig.stagingFolderPath,
      'source',
      'MRuntime.brs'
    );
    console.log(`Creating runtime util file at ${filePath}`);

    const file = new File(filePath);
    let text = `
    ' Generated by maestro framework - this class contains runtime library files
    ${this.getClassMapFunction('MRuntime')}
    ${this.getXMLCompTypesFunction('MRuntime')}
    `;

    file.setFileContents(text);
    file.saveFileContents();
  }

  addFile(file: BrsFile) {
    for(let cs of file.parser.references.classStatements) {
      console.log(cs.getName(ParseMode.BrightScript));
      this.fileMap.addClassName(cs.getName(ParseMode.BrightScript));
    }
  }
}
